{"ast":null,"code":"//STORE\nimport { useMemo } from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from \"./reducer/index\";\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nlet store;\nconst persistConfig = {\n  key: 'covidNews',\n  storage\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer); // export default () => {\n//   let store = createStore(persistedReducer)\n//   let persistor = persistStore(store)\n//   return { store, persistor }\n// }\n// CONFIGURATION MAKESTORE\n// function initStore(preloadedState) {\n//   return createStore(\n//     persistedReducer,\n//     preloadedState,\n//     composeWithDevTools(applyMiddleware(thunkMiddleware))\n//   )\n// }\n\nexport default function initializeStore(initialState) {\n  return createStore(persistedReducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n} // export const initializeStore = (preloadedState) => {\n//   let _store = store ?? initStore(preloadedState)\n//   // After navigating to a page with an initial Redux state, merge that state\n//   // with the current state in the store, and create a new store\n//   if (preloadedState && store) {\n//     _store = initStore({\n//       ...store.getState(),\n//       ...preloadedState,\n//     })\n//     // Reset the current store\n//     store = undefined\n//   }\n//   // For SSG and SSR always create a new store\n//   if (typeof window === 'undefined') return _store\n//   // Create the store once in the client\n//   if (!store) store = _store\n//   return _store\n// }\n// export function useStore(initialState) {\n//   const store = useMemo(() => initializeStore(initialState), [initialState])\n//   return store\n// }","map":{"version":3,"sources":["/home/kucing/project/covid-app/appredux/store.js"],"names":["useMemo","createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","rootReducer","persistStore","persistReducer","storage","store","persistConfig","key","persistedReducer","initializeStore","initialState"],"mappings":"AAAA;AACA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,IAAIC,KAAJ;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,WADe;AAEpBH,EAAAA;AAFoB,CAAtB;AAKA,MAAMI,gBAAgB,GAAGL,cAAc,CAACG,aAAD,EAAgBL,WAAhB,CAAvC,C,CAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASQ,eAAT,CAAyBC,YAAzB,EAAuC;AACpD,SAAOb,WAAW,CAACW,gBAAD,EAAmBE,YAAnB,EAAkCX,mBAAmB,CAACD,eAAe,CAACE,eAAD,CAAhB,CAArD,CAAlB;AACD,C,CAED;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["//STORE\nimport { useMemo } from 'react'\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\nimport rootReducer from \"./reducer/index\"\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nlet store\n\nconst persistConfig = {\n  key: 'covidNews',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\n// export default () => {\n//   let store = createStore(persistedReducer)\n//   let persistor = persistStore(store)\n//   return { store, persistor }\n// }\n\n\n// CONFIGURATION MAKESTORE\n// function initStore(preloadedState) {\n//   return createStore(\n//     persistedReducer,\n//     preloadedState,\n//     composeWithDevTools(applyMiddleware(thunkMiddleware))\n//   )\n// }\n\nexport default function initializeStore(initialState) {\n  return createStore(persistedReducer, initialState,  composeWithDevTools(applyMiddleware(thunkMiddleware)) )\n}\n\n// export const initializeStore = (preloadedState) => {\n//   let _store = store ?? initStore(preloadedState)\n\n//   // After navigating to a page with an initial Redux state, merge that state\n//   // with the current state in the store, and create a new store\n//   if (preloadedState && store) {\n//     _store = initStore({\n//       ...store.getState(),\n//       ...preloadedState,\n//     })\n//     // Reset the current store\n//     store = undefined\n//   }\n\n//   // For SSG and SSR always create a new store\n//   if (typeof window === 'undefined') return _store\n//   // Create the store once in the client\n//   if (!store) store = _store\n\n//   return _store\n// }\n\n// export function useStore(initialState) {\n//   const store = useMemo(() => initializeStore(initialState), [initialState])\n//   return store\n// }\n"]},"metadata":{},"sourceType":"module"}