{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//STORE\nimport { useMemo } from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport navbarReducer, { INITIAL_STATE } from \"./reducer/navbarReducer\";\nimport listArticlesReducer from './reducer/listArticlesReducer';\nimport combineReducers from \"./reducer/index\";\nlet store; // CONFIGURATION\n\nfunction initStore(preloadedState = INITIAL_STATE) {\n  return createStore(combineReducers, preloadedState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n}\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/home/kucing/project/covid-app/appredux/store.js"],"names":["useMemo","createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","navbarReducer","INITIAL_STATE","listArticlesReducer","combineReducers","store","initStore","preloadedState","initializeStore","_store","getState","undefined","useStore","initialState"],"mappings":";;;;;;AAAA;AACA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,aAAP,IAAsBC,aAAtB,QAA0C,yBAA1C;AACA,OAAOC,mBAAP,MAAgC,+BAAhC;AACA,OAAOC,eAAP,MAA4B,iBAA5B;AAGA,IAAIC,KAAJ,C,CAEA;;AACA,SAASC,SAAT,CAAmBC,cAAc,GAAGL,aAApC,EAAoD;AAClD,SAAOL,WAAW,CAChBO,eADgB,EAEhBG,cAFgB,EAGhBR,mBAAmB,CAACD,eAAe,CAACE,eAAD,CAAhB,CAHH,CAAlB;AAKD;;AAED,OAAO,MAAMQ,eAAe,GAAID,cAAD,IAAoB;AAAA;;AACjD,MAAIE,MAAM,cAAGJ,KAAH,6CAAYC,SAAS,CAACC,cAAD,CAA/B,CADiD,CAGjD;AACA;;;AACA,MAAIA,cAAc,IAAIF,KAAtB,EAA6B;AAC3BI,IAAAA,MAAM,GAAGH,SAAS,iCACbD,KAAK,CAACK,QAAN,EADa,GAEbH,cAFa,EAAlB,CAD2B,CAK3B;;AACAF,IAAAA,KAAK,GAAGM,SAAR;AACD,GAZgD,CAcjD;;;AACA,YAAmC,OAAOF,MAAP,CAfc,CAgBjD;;AACA,MAAI,CAACJ,KAAL,EAAYA,KAAK,GAAGI,MAAR;AAEZ,SAAOA,MAAP;AACD,CApBM;AAsBP,OAAO,SAASG,QAAT,CAAkBC,YAAlB,EAAgC;AACrC,QAAMR,KAAK,GAAGT,OAAO,CAAC,MAAMY,eAAe,CAACK,YAAD,CAAtB,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOR,KAAP;AACD","sourcesContent":["//STORE\nimport { useMemo } from 'react'\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\nimport navbarReducer,{INITIAL_STATE} from \"./reducer/navbarReducer\"\nimport listArticlesReducer from './reducer/listArticlesReducer'\nimport combineReducers from \"./reducer/index\"\n\n\nlet store\n\n// CONFIGURATION\nfunction initStore(preloadedState = INITIAL_STATE ) {\n  return createStore(\n    combineReducers,\n    preloadedState,\n    composeWithDevTools(applyMiddleware(thunkMiddleware))\n  )\n}\n\nexport const initializeStore = (preloadedState) => {\n  let _store = store ?? initStore(preloadedState)\n\n  // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n  if (preloadedState && store) {\n    _store = initStore({\n      ...store.getState(),\n      ...preloadedState,\n    })\n    // Reset the current store\n    store = undefined\n  }\n\n  // For SSG and SSR always create a new store\n  if (typeof window === 'undefined') return _store\n  // Create the store once in the client\n  if (!store) store = _store\n\n  return _store\n}\n\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState])\n  return store\n}"]},"metadata":{},"sourceType":"module"}