{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//STORE\nimport { useMemo } from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from \"./reducer/index\";\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nlet store; // CONFIGURATION\n\nfunction initStore(preloadedState) {\n  return createStore(rootReducer, persistedReducer, preloadedState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n}\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (false) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  _s();\n\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}\n\n_s(useStore, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");\n\nconst persistConfig = {\n  key: 'Covid News',\n  storage\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nexport default (() => {\n  let store = createStore(persistedReducer);\n  let persistor = persistStore(store);\n  return {\n    store,\n    persistor\n  };\n});","map":{"version":3,"sources":["/home/kucing/project/covid-app/appredux/store.js"],"names":["useMemo","createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","rootReducer","persistStore","persistReducer","storage","store","initStore","preloadedState","persistedReducer","initializeStore","_store","getState","undefined","useStore","initialState","persistConfig","key","persistor"],"mappings":";;;;;;;;AAAA;AACA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,IAAIC,KAAJ,C,CAEA;;AACA,SAASC,SAAT,CAAmBC,cAAnB,EAAmC;AACjC,SAAOV,WAAW,CAChBI,WADgB,EAEhBO,gBAFgB,EAGhBD,cAHgB,EAIhBR,mBAAmB,CAACD,eAAe,CAACE,eAAD,CAAhB,CAJH,CAAlB;AAMD;;AAED,OAAO,MAAMS,eAAe,GAAIF,cAAD,IAAoB;AAAA;;AACjD,MAAIG,MAAM,cAAGL,KAAH,6CAAYC,SAAS,CAACC,cAAD,CAA/B,CADiD,CAGjD;AACA;;;AACA,MAAIA,cAAc,IAAIF,KAAtB,EAA6B;AAC3BK,IAAAA,MAAM,GAAGJ,SAAS,iCACbD,KAAK,CAACM,QAAN,EADa,GAEbJ,cAFa,EAAlB,CAD2B,CAK3B;;AACAF,IAAAA,KAAK,GAAGO,SAAR;AACD,GAZgD,CAcjD;;;AACA,aAAmC,OAAOF,MAAP,CAfc,CAgBjD;;AACA,MAAI,CAACL,KAAL,EAAYA,KAAK,GAAGK,MAAR;AAEZ,SAAOA,MAAP;AACD,CApBM;AAsBP,OAAO,SAASG,QAAT,CAAkBC,YAAlB,EAAgC;AAAA;;AACrC,QAAMT,KAAK,GAAGT,OAAO,CAAC,MAAMa,eAAe,CAACK,YAAD,CAAtB,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOT,KAAP;AACD;;GAHeQ,Q;;AAKhB,MAAME,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,YADe;AAEpBZ,EAAAA;AAFoB,CAAtB;AAKA,MAAMI,gBAAgB,GAAGL,cAAc,CAACY,aAAD,EAAgBd,WAAhB,CAAvC;AAEA,gBAAe,MAAM;AACnB,MAAII,KAAK,GAAGR,WAAW,CAACW,gBAAD,CAAvB;AACA,MAAIS,SAAS,GAAGf,YAAY,CAACG,KAAD,CAA5B;AACA,SAAO;AAAEA,IAAAA,KAAF;AAASY,IAAAA;AAAT,GAAP;AACD,CAJD","sourcesContent":["//STORE\nimport { useMemo } from 'react'\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\nimport rootReducer from \"./reducer/index\"\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nlet store\n\n// CONFIGURATION\nfunction initStore(preloadedState) {\n  return createStore(\n    rootReducer,\n    persistedReducer,\n    preloadedState,\n    composeWithDevTools(applyMiddleware(thunkMiddleware))\n  )\n}\n\nexport const initializeStore = (preloadedState) => {\n  let _store = store ?? initStore(preloadedState)\n\n  // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n  if (preloadedState && store) {\n    _store = initStore({\n      ...store.getState(),\n      ...preloadedState,\n    })\n    // Reset the current store\n    store = undefined\n  }\n\n  // For SSG and SSR always create a new store\n  if (typeof window === 'undefined') return _store\n  // Create the store once in the client\n  if (!store) store = _store\n\n  return _store\n}\n\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState])\n  return store\n}\n\nconst persistConfig = {\n  key: 'Covid News',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport default () => {\n  let store = createStore(persistedReducer)\n  let persistor = persistStore(store)\n  return { store, persistor }\n}"]},"metadata":{},"sourceType":"module"}