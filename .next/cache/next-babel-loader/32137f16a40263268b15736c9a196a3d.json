{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//STORE\nimport { useMemo } from 'react';\nimport { createStore } from 'redux';\nlet store; // Global state\n\nconst INITIAL_STATE = {\n  isClose: true,\n  isFetch: false,\n  showInfo: true,\n  //SHOW INFO GLOBAL STATE\n  isNotif: true\n}; // REDUCER\n\nconst reducerForm = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"CHANGE_IS_CLOSE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        inClose: !state.isClose\n      });\n\n    case \"CHANGE_IS_FETCH\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        inClose: !state.isFetch\n      });\n\n    case \"HANDLE_SHOW_INFO\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showInfo: !state.showInfo,\n        isNotif: !state.isNotif\n      });\n\n    default:\n      return state;\n  }\n}; // CONFIGURATION\n\n\nfunction initStore(preloadedState = INITIAL_STATE) {\n  return createStore(reducerForm, preloadedState);\n}\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (false) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  _s();\n\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}\n\n_s(useStore, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/home/kucing/project/covid-app/appredux/store.js"],"names":["useMemo","createStore","store","INITIAL_STATE","isClose","isFetch","showInfo","isNotif","reducerForm","state","action","type","inClose","initStore","preloadedState","initializeStore","_store","getState","undefined","useStore","initialState"],"mappings":";;;;;;;;AAAA;AACA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,IAAIC,KAAJ,C,CAEA;;AACA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,OAAO,EAAE,IADW;AAEpBC,EAAAA,OAAO,EAAE,KAFW;AAIpBC,EAAAA,QAAQ,EAAE,IAJU;AAIJ;AAChBC,EAAAA,OAAO,EAAE;AALW,CAAtB,C,CASA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,aAAT,EAAwBO,MAAxB,KAAmC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,iBAAL;AACE,6CACKF,KADL;AAEEG,QAAAA,OAAO,EAAE,CAACH,KAAK,CAACL;AAFlB;;AAKF,SAAK,iBAAL;AACE,6CACKK,KADL;AAEEG,QAAAA,OAAO,EAAE,CAACH,KAAK,CAACJ;AAFlB;;AAMF,SAAK,kBAAL;AACE,6CACKI,KADL;AAEEH,QAAAA,QAAQ,EAAE,CAACG,KAAK,CAACH,QAFnB;AAGEC,QAAAA,OAAO,EAAE,CAACE,KAAK,CAACF;AAHlB;;AAOF;AACE,aAAOE,KAAP;AAvBJ;AAyBD,CA1BD,C,CA8BA;;;AACA,SAASI,SAAT,CAAmBC,cAAc,GAAGX,aAApC,EAAoD;AAClD,SAAOF,WAAW,CAChBO,WADgB,EAEhBM,cAFgB,CAAlB;AAID;;AAED,OAAO,MAAMC,eAAe,GAAID,cAAD,IAAoB;AAAA;;AACjD,MAAIE,MAAM,cAAGd,KAAH,6CAAYW,SAAS,CAACC,cAAD,CAA/B,CADiD,CAGjD;AACA;;;AACA,MAAIA,cAAc,IAAIZ,KAAtB,EAA6B;AAC3Bc,IAAAA,MAAM,GAAGH,SAAS,iCACbX,KAAK,CAACe,QAAN,EADa,GAEbH,cAFa,EAAlB,CAD2B,CAK3B;;AACAZ,IAAAA,KAAK,GAAGgB,SAAR;AACD,GAZgD,CAcjD;;;AACA,aAAmC,OAAOF,MAAP,CAfc,CAgBjD;;AACA,MAAI,CAACd,KAAL,EAAYA,KAAK,GAAGc,MAAR;AAEZ,SAAOA,MAAP;AACD,CApBM;AAsBP,OAAO,SAASG,QAAT,CAAkBC,YAAlB,EAAgC;AAAA;;AACrC,QAAMlB,KAAK,GAAGF,OAAO,CAAC,MAAMe,eAAe,CAACK,YAAD,CAAtB,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOlB,KAAP;AACD;;GAHeiB,Q","sourcesContent":["//STORE\nimport { useMemo } from 'react'\nimport { createStore } from 'redux'\n\nlet store\n\n// Global state\nconst INITIAL_STATE = {\n  isClose: true,\n  isFetch: false,\n\n  showInfo: true, //SHOW INFO GLOBAL STATE\n  isNotif: true\n}\n\n\n// REDUCER\nconst reducerForm = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"CHANGE_IS_CLOSE\":\n      return {\n        ...state,\n        inClose: !state.isClose\n      }\n    \n    case \"CHANGE_IS_FETCH\":\n      return {\n        ...state,\n        inClose: !state.isFetch\n      }\n\n      \n    case \"HANDLE_SHOW_INFO\":\n      return {\n        ...state,\n        showInfo: !state.showInfo,\n        isNotif: !state.isNotif\n      }\n\n    \n    default:\n      return state\n  }\n}\n\n\n\n// CONFIGURATION\nfunction initStore(preloadedState = INITIAL_STATE ) {\n  return createStore(\n    reducerForm,\n    preloadedState,\n  )\n}\n\nexport const initializeStore = (preloadedState) => {\n  let _store = store ?? initStore(preloadedState)\n\n  // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n  if (preloadedState && store) {\n    _store = initStore({\n      ...store.getState(),\n      ...preloadedState,\n    })\n    // Reset the current store\n    store = undefined\n  }\n\n  // For SSG and SSR always create a new store\n  if (typeof window === 'undefined') return _store\n  // Create the store once in the client\n  if (!store) store = _store\n\n  return _store\n}\n\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState])\n  return store\n}"]},"metadata":{},"sourceType":"module"}