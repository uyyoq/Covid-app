{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const INITIAL_STATE = {\n  count: 0\n};\n\nconst countReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"HANDLE_PLUS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count + 1\n      });\n\n    case \"HANDLE_MINUS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count - 1\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default countReducer;","map":{"version":3,"sources":["/home/kucing/project/covid-app/appredux/reducer/countReducer.js"],"names":["INITIAL_STATE","count","countReducer","state","action","type"],"mappings":";;;;;;AAAA,OAAO,MAAMA,aAAa,GAAG;AAC3BC,EAAAA,KAAK,EAAE;AADoB,CAAtB;;AAIP,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGH,aAAT,EAAwBI,MAAxB,KAAmC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,6CACKF,KADL;AAEEF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAFvB;;AAIF,SAAK,cAAL;AACE,6CACKE,KADL;AAEEF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAFvB;;AAIF;AACE,aAAOE,KAAP;AAZJ;AAcD,CAfD;;AAiBA,eAAeD,YAAf","sourcesContent":["export const INITIAL_STATE = {\n  count: 0\n}\n\nconst countReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"HANDLE_PLUS\":\n      return {\n        ...state,\n        count: state.count + 1,\n      }\n    case \"HANDLE_MINUS\":\n      return {\n        ...state,\n        count: state.count - 1,\n      }\n    default:\n      return state\n  }\n}\n\nexport default countReducer\n\n"]},"metadata":{},"sourceType":"module"}